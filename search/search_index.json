{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome rmfakecloud is a clone of the cloud sync the remarkable tablet is using, in case you want to sync/backup your files and have full control of the hosting/storage environment.","title":"Home"},{"location":"#welcome","text":"rmfakecloud is a clone of the cloud sync the remarkable tablet is using, in case you want to sync/backup your files and have full control of the hosting/storage environment.","title":"Welcome"},{"location":"browser-extension/","text":"Browser Extension Support As of commit a62153e , the Read on reMarkable Chrome extension is supported by rmfakecloud. Of course, the extension needs to be modified to connect to your cloud. Install the extension from the Chrome Web Store. Find the extension directory: Go to chrome://extensions in your browser, find \"Read on reMarkable\" in the list, and take note of the ID. Mine is bfhkfdnddlhfippjbflipboognpdpoeh . Go to chrome://version in your browser, and take note of the \"Profile Path\". Mine is /home/murchu27/.config/BraveSoftware/Brave-Browser/Default (Linux). Your extension directory will be {Profile Path}/Extensions/{ID}/{some version number} . Mine is /home/murchu27/.config/BraveSoftware/Brave-Browser/Default/Extensions/bfhkfdnddlhfippjbflipboognpdpoeh/1.2.0_0 . Within the extension directory, replace any instances of https://internal.cloud.remarkable.com and https://webapp-production-dot-remarkable-production.appspot.com/ with the URL of your cloud (same as the STORAGE_URL used by the tablet). You will need to do this in manifest.json , and any of the .js files. If you are using Linux, you can save the below script as, e.g., rmfakecloud-patch.sh . mycloud=$1 find ./ -type f -exec sed -i \"s/https:\\/\\/internal.cloud.remarkable.com/$mycloud/g\" {} \\; find ./ -type f -exec sed -i \"s/https:\\/\\/webapp-production-dot-remarkable-production.appspot.com/$mycloud/g\" {} \\; Make this script executable with chmod +x rmfakecloud-patch.sh . Run the script, passing in the URL of your cloud, e.g., ./rmfakecloud-patch.sh http://mycloud.com . Reload the extension in your browser: Go to chrome://extensions in your browser. Enable \"Developer mode\" using the toggle at the top right. Click the newly appeared \"Load unpacked\" button, a dialogue box will open. Navigate to the extension directory (the same one as in the step above), and click \"Open\". Try using the extension. Webpages should be sent to your tablet! See #67 for the original discussion of this feature.","title":"Browser Extension"},{"location":"browser-extension/#browser-extension-support","text":"As of commit a62153e , the Read on reMarkable Chrome extension is supported by rmfakecloud. Of course, the extension needs to be modified to connect to your cloud. Install the extension from the Chrome Web Store. Find the extension directory: Go to chrome://extensions in your browser, find \"Read on reMarkable\" in the list, and take note of the ID. Mine is bfhkfdnddlhfippjbflipboognpdpoeh . Go to chrome://version in your browser, and take note of the \"Profile Path\". Mine is /home/murchu27/.config/BraveSoftware/Brave-Browser/Default (Linux). Your extension directory will be {Profile Path}/Extensions/{ID}/{some version number} . Mine is /home/murchu27/.config/BraveSoftware/Brave-Browser/Default/Extensions/bfhkfdnddlhfippjbflipboognpdpoeh/1.2.0_0 . Within the extension directory, replace any instances of https://internal.cloud.remarkable.com and https://webapp-production-dot-remarkable-production.appspot.com/ with the URL of your cloud (same as the STORAGE_URL used by the tablet). You will need to do this in manifest.json , and any of the .js files. If you are using Linux, you can save the below script as, e.g., rmfakecloud-patch.sh . mycloud=$1 find ./ -type f -exec sed -i \"s/https:\\/\\/internal.cloud.remarkable.com/$mycloud/g\" {} \\; find ./ -type f -exec sed -i \"s/https:\\/\\/webapp-production-dot-remarkable-production.appspot.com/$mycloud/g\" {} \\; Make this script executable with chmod +x rmfakecloud-patch.sh . Run the script, passing in the URL of your cloud, e.g., ./rmfakecloud-patch.sh http://mycloud.com . Reload the extension in your browser: Go to chrome://extensions in your browser. Enable \"Developer mode\" using the toggle at the top right. Click the newly appeared \"Load unpacked\" button, a dialogue box will open. Navigate to the extension directory (the same one as in the step above), and click \"Open\". Try using the extension. Webpages should be sent to your tablet! See #67 for the original discussion of this feature.","title":"Browser Extension Support"},{"location":"todo/","text":"UI specify folder on upload UI add/remove users UI move files around UI rename files UI realtime notifications UI document preview UI archive / restore documents UI share files between users UI refactoring UI sent emails history add message broker add db add blob storage","title":"TODO"},{"location":"install/docker/","text":"Docker run command docker run -it --rm -p 3000:3000 -e JWT_SECRET_KEY='something' ddvk/rmfakecloud (you can pass -h to see the available options) Docker compose file version: \"3\" services: rmfakecloud: image: ddvk/rmfakecloud container_name: rmfakecloud restart: unless-stopped env_file: - env volumes: - ./data:/data A env file is needed where all of the environmental variables are defined. Using the environment: option in the compose file is also valid and everything is in one file. For the possible environment variables, please have a look in the environment section.","title":"Docker"},{"location":"install/docker/#docker-run-command","text":"docker run -it --rm -p 3000:3000 -e JWT_SECRET_KEY='something' ddvk/rmfakecloud (you can pass -h to see the available options)","title":"Docker run command"},{"location":"install/docker/#docker-compose-file","text":"version: \"3\" services: rmfakecloud: image: ddvk/rmfakecloud container_name: rmfakecloud restart: unless-stopped env_file: - env volumes: - ./data:/data A env file is needed where all of the environmental variables are defined. Using the environment: option in the compose file is also valid and everything is in one file. For the possible environment variables, please have a look in the environment section.","title":"Docker compose file"},{"location":"install/environment/","text":"The following environment variables are available: JWT_SECRET_KEY needed for the whole auth thing to work, set something long STORAGE_URL controls whether file upload/download goes through the local proxy or directly. the address of rmfakecloud as visible from the tablet , especially if the host is behind a reverse proxy or in a container (default: http://hostname:port) PORT port number (default: 3000) DATADIR to set data/files directory (default: data in current dir) LOGLEVEL default to info (set to debug for more logging or warn , error for less) RM_HTTPS_COOKIE=1 UI, send auth cookies only via https For handwriting recognition support you need an application key and hmac from myscript.com: RMAPI_HWR_APPLICATIONKEY application key obtained from myscript RMAPI_HWR_HMAC hmac obtained from myscript For sending emails: RM_SMTP_SERVER the smtp server address RM_SMTP_USERNAME username/email for login RM_SMTP_PASSWORD plaintext password (application password should work) RM_SMTP_FROM custom FROM header for the mails","title":"Environment Variables"},{"location":"install/source/","text":"Building Dependencies: nodejs yarn go make Build: git clone https://github.com/ddvk/rmfakecloud cd rmfakecloud make all Installing Copy the rmfakecloud binary for your system from the dist folder to /usr/local/bin and rename it to rmfakecloud e.g. cp dist/rmfakecloud-x64 /usr/local/bin/rmfakecloud Setup the service to run with your init system. See below for examples Create and modify the configuration file. See below for examples Create the library folder you specified in your configuration file. e.g. mkdir /usr/local/lib/rmfakecloud Enable and start the service with your init system. e.g. rc-update add rmfakecloud && service start rmfakecloud or systemctl enable --now rmfakecloud Init System Examples OpenRC /etc/init.d/rmfakecloud #!/sbin/openrc-run name=\"rmfakecloud\" command=\"/usr/local/bin/rmfakecloud\" command_args=\"\" pidfile=\"/var/run/rmfakecloud.pid\" command_background=\"yes\" output_log=\"/var/log/messages\" error_log=\"/var/log/messages\" depend() { need net localmount } /etc/conf.d/rmfakecloud # Basic settings export JWT_SECRET_KEY=SOME_KEY export STORAGE_URL=https://example.com export PORT=80 export DATADIR=/usr/local/lib/rmfakecloud export LOGLEVEL=info export RM_HTTPS_COOKIE=1 # Email export RM_SMTP_SERVER=smtp.gmail.com:465 export RM_SMTP_USERNAME=MY_EMAIL_ADDRESS export RM_SMTP_PASSWORD=MY_PASSWORD # Handwriting recognition export RMAPI_HWR_APPLICATIONKEY=SOME_KEY export RMAPI_HWR_HMAC=SOME_KEY SystemD rmfakecloud.service [Unit] Description=rmfakecloud [Service] ExecStart=/usr/local/bin/rmfakecloud EnvironmentFile=/etc/rmfakecloud.conf [Install] WantedBy=multi-user.target Wants=network-online.target After=network-online.target rmfakecloud.conf JWT_SECRET_KEY=SOME_KEY STORAGE_URL=https://example.com PORT=80 DATADIR=/usr/local/lib/rmfakecloud LOGLEVEL=info RM_HTTPS_COOKIE=1 # Email RM_SMTP_SERVER=smtp.gmail.com:465 RM_SMTP_USERNAME=MY_EMAIL_ADDRESS RM_SMTP_PASSWORD=MY_PASSWORD # Handwriting recognition RMAPI_HWR_APPLICATIONKEY=SOME_KEY RMAPI_HWR_HMAC=SOME_KEY","title":"From Source"},{"location":"install/source/#building","text":"","title":"Building"},{"location":"install/source/#dependencies","text":"nodejs yarn go make","title":"Dependencies:"},{"location":"install/source/#build","text":"git clone https://github.com/ddvk/rmfakecloud cd rmfakecloud make all","title":"Build:"},{"location":"install/source/#installing","text":"Copy the rmfakecloud binary for your system from the dist folder to /usr/local/bin and rename it to rmfakecloud e.g. cp dist/rmfakecloud-x64 /usr/local/bin/rmfakecloud Setup the service to run with your init system. See below for examples Create and modify the configuration file. See below for examples Create the library folder you specified in your configuration file. e.g. mkdir /usr/local/lib/rmfakecloud Enable and start the service with your init system. e.g. rc-update add rmfakecloud && service start rmfakecloud or systemctl enable --now rmfakecloud","title":"Installing"},{"location":"install/source/#init-system-examples","text":"","title":"Init System Examples"},{"location":"install/source/#openrc","text":"/etc/init.d/rmfakecloud #!/sbin/openrc-run name=\"rmfakecloud\" command=\"/usr/local/bin/rmfakecloud\" command_args=\"\" pidfile=\"/var/run/rmfakecloud.pid\" command_background=\"yes\" output_log=\"/var/log/messages\" error_log=\"/var/log/messages\" depend() { need net localmount } /etc/conf.d/rmfakecloud # Basic settings export JWT_SECRET_KEY=SOME_KEY export STORAGE_URL=https://example.com export PORT=80 export DATADIR=/usr/local/lib/rmfakecloud export LOGLEVEL=info export RM_HTTPS_COOKIE=1 # Email export RM_SMTP_SERVER=smtp.gmail.com:465 export RM_SMTP_USERNAME=MY_EMAIL_ADDRESS export RM_SMTP_PASSWORD=MY_PASSWORD # Handwriting recognition export RMAPI_HWR_APPLICATIONKEY=SOME_KEY export RMAPI_HWR_HMAC=SOME_KEY","title":"OpenRC"},{"location":"install/source/#systemd","text":"rmfakecloud.service [Unit] Description=rmfakecloud [Service] ExecStart=/usr/local/bin/rmfakecloud EnvironmentFile=/etc/rmfakecloud.conf [Install] WantedBy=multi-user.target Wants=network-online.target After=network-online.target rmfakecloud.conf JWT_SECRET_KEY=SOME_KEY STORAGE_URL=https://example.com PORT=80 DATADIR=/usr/local/lib/rmfakecloud LOGLEVEL=info RM_HTTPS_COOKIE=1 # Email RM_SMTP_SERVER=smtp.gmail.com:465 RM_SMTP_USERNAME=MY_EMAIL_ADDRESS RM_SMTP_PASSWORD=MY_PASSWORD # Handwriting recognition RMAPI_HWR_APPLICATIONKEY=SOME_KEY RMAPI_HWR_HMAC=SOME_KEY","title":"SystemD"},{"location":"integrations/local-file-system/","text":"Experimental and not suited for multiple users yet Add this to your .userprofile: integrations: - provider: localfs id: [generate some uuid] name: [some name] path: /some/path/with/files","title":"Local File System"},{"location":"integrations/webdav/","text":"WebDAV (nextcloud) This is still work in progress and no ui exists yet. It can used with webdav services, for example provided by a self hosted nextcloud instance. Add this to your .userprofile: integrations: - provider: webdav id: [generate some uuid] name: [some name] username: [username] password: [password] address: [webdavaddrss] insecure: [true/false] (to skip certificate checks)","title":"WebDAV"},{"location":"integrations/webdav/#webdav-nextcloud","text":"This is still work in progress and no ui exists yet. It can used with webdav services, for example provided by a self hosted nextcloud instance. Add this to your .userprofile: integrations: - provider: webdav id: [generate some uuid] name: [some name] username: [username] password: [password] address: [webdavaddrss] insecure: [true/false] (to skip certificate checks)","title":"WebDAV (nextcloud)"},{"location":"remarkable/https/","text":"Now you can run TLS directly on rmfakecloud: TLS_CERT=somecert TLS_KEY=somecertkey","title":"HTTPS"},{"location":"remarkable/setup/","text":"Device Setup There are several ways to make it work, choose whatever works for you Automatic toltec Install using toltec . opkg install rmfakecloud-proxy rmfakecloudctl set-upstream <URL> rmfakecloudctl enable rmfakecloud-proxy script Get the installer from: rmfakecloud-proxy or run the automagic: sh -c \"$(wget https://raw.githubusercontent.com/ddvk/rmfakecloud/master/scripts/device/automagic.sh -O-)\" Manual Installing a proxy on devices A reverse proxy rmfakecloud-proxy has to be installed run rmfakecloud on whichever port you want, you can use either HTTP (not recommended) or HTTPS, generate a new cert for the url you chose e.g with Let's Encrypt Steps (done by the automagic scripts): - generate a CA and host certificate for *.appspot.com - create the CA folder: mkdir -p /usr/local/share/ca-certificates - copy the CA.crt file to /usr/local/share/ca-certificates and run update-ca-certificates - modify the hosts file /etc/hosts - Run a reverse https proxy on the rm tablet as a service, e.g. secure , - stop xochitl systemctl stop xochitl - add the followint entries to /etc/hosts 127.0.0.1 hwr-production-dot-remarkable-production.appspot.com 127.0.0.1 service-manager-production-dot-remarkable-production.appspot.com 127.0.0.1 local.appspot.com 127.0.0.1 my.remarkable.com 127.0.0.1 ping.remarkable.com 127.0.0.1 internal.cloud.remarkable.com set the address of your api host:port in the reverse proxy secure -cert proxy.crt -key proxy.key http(s)://host_where_the_api_is_running:someport or use the provided systemd unit file and put the config in proxycfg set the STORAGE_URL to point to this address (this thing the device can resolve/see e.g the reverse proxy, public dns etc) run the host run fixsync.sh on the device to mark all files as new (not to be deleted from the device) start xochitl systemctl start xochitl Windows/Mac Desktop Client: - modify the hosts file ( \\system32\\drivers\\etc\\hosts ) add the same entries as on the tablet - run a reverse proxy on the host or somewhere else pointing it to rmfakecloud with the same certs - profit PROS : easy setup, you can use whichever port you want, you can get a real trusted ca cert from let's encrypt, if running in a trusted network you may chose to use HTTP CONS : you have to configure HTTPS on the host yourself, additional Desktop config Modify device /etc/hosts Connect to the host directly, without a reverse proxy, with HTTPS on :443 Steps: - generate the certs from Variant 1, you get them (proxy.crt, proxy.key, ca.crt) and trust the ca.crt - run rmfakecloud with: TLS_KEY=proxy.key TLS_CERT=proxy.crt STORAGE_URL=https://local.apphost.com modify /etc/hosts but use the rmfakecloud's ip instead of 127.0.0.1 Windows/Mac Desktop Client: - trust the ca.crt (add it to Trusted Root CA, use cert.msc) - modify the hosts file ( \\system32\\drivers\\etc\\hosts ) add the same entries as on the tablet - profit PROS : you can use the Windows/Mac clients, no need for a proxy on the device CONS : a bit harder to setup, each host has to trust the ca and modify the hosts file, you have to use port 443 Edit router DNS entries Same as the previous method , but instead of modifying any hosts file, make the changes on your DNS/router: - add the host entries directly on your router (Hosts in OpenWRT) - trust the ca.crt - profit PROS : a bit easier, you can you even the mobile apps if you manage to install the root ca CONS : you can't use the official cloud anymore due to the mangled DNS","title":"Device"},{"location":"remarkable/setup/#device-setup","text":"There are several ways to make it work, choose whatever works for you","title":"Device Setup"},{"location":"remarkable/setup/#automatic","text":"","title":"Automatic"},{"location":"remarkable/setup/#toltec","text":"Install using toltec . opkg install rmfakecloud-proxy rmfakecloudctl set-upstream <URL> rmfakecloudctl enable","title":"toltec"},{"location":"remarkable/setup/#rmfakecloud-proxy-script","text":"Get the installer from: rmfakecloud-proxy or run the automagic: sh -c \"$(wget https://raw.githubusercontent.com/ddvk/rmfakecloud/master/scripts/device/automagic.sh -O-)\"","title":"rmfakecloud-proxy script"},{"location":"remarkable/setup/#manual","text":"","title":"Manual"},{"location":"remarkable/setup/#installing-a-proxy-on-devices","text":"A reverse proxy rmfakecloud-proxy has to be installed run rmfakecloud on whichever port you want, you can use either HTTP (not recommended) or HTTPS, generate a new cert for the url you chose e.g with Let's Encrypt Steps (done by the automagic scripts): - generate a CA and host certificate for *.appspot.com - create the CA folder: mkdir -p /usr/local/share/ca-certificates - copy the CA.crt file to /usr/local/share/ca-certificates and run update-ca-certificates - modify the hosts file /etc/hosts - Run a reverse https proxy on the rm tablet as a service, e.g. secure , - stop xochitl systemctl stop xochitl - add the followint entries to /etc/hosts 127.0.0.1 hwr-production-dot-remarkable-production.appspot.com 127.0.0.1 service-manager-production-dot-remarkable-production.appspot.com 127.0.0.1 local.appspot.com 127.0.0.1 my.remarkable.com 127.0.0.1 ping.remarkable.com 127.0.0.1 internal.cloud.remarkable.com set the address of your api host:port in the reverse proxy secure -cert proxy.crt -key proxy.key http(s)://host_where_the_api_is_running:someport or use the provided systemd unit file and put the config in proxycfg set the STORAGE_URL to point to this address (this thing the device can resolve/see e.g the reverse proxy, public dns etc) run the host run fixsync.sh on the device to mark all files as new (not to be deleted from the device) start xochitl systemctl start xochitl Windows/Mac Desktop Client: - modify the hosts file ( \\system32\\drivers\\etc\\hosts ) add the same entries as on the tablet - run a reverse proxy on the host or somewhere else pointing it to rmfakecloud with the same certs - profit PROS : easy setup, you can use whichever port you want, you can get a real trusted ca cert from let's encrypt, if running in a trusted network you may chose to use HTTP CONS : you have to configure HTTPS on the host yourself, additional Desktop config","title":"Installing a proxy on devices"},{"location":"remarkable/setup/#modify-device-etchosts","text":"Connect to the host directly, without a reverse proxy, with HTTPS on :443 Steps: - generate the certs from Variant 1, you get them (proxy.crt, proxy.key, ca.crt) and trust the ca.crt - run rmfakecloud with: TLS_KEY=proxy.key TLS_CERT=proxy.crt STORAGE_URL=https://local.apphost.com modify /etc/hosts but use the rmfakecloud's ip instead of 127.0.0.1 Windows/Mac Desktop Client: - trust the ca.crt (add it to Trusted Root CA, use cert.msc) - modify the hosts file ( \\system32\\drivers\\etc\\hosts ) add the same entries as on the tablet - profit PROS : you can use the Windows/Mac clients, no need for a proxy on the device CONS : a bit harder to setup, each host has to trust the ca and modify the hosts file, you have to use port 443","title":"Modify device /etc/hosts"},{"location":"remarkable/setup/#edit-router-dns-entries","text":"Same as the previous method , but instead of modifying any hosts file, make the changes on your DNS/router: - add the host entries directly on your router (Hosts in OpenWRT) - trust the ca.crt - profit PROS : a bit easier, you can you even the mobile apps if you manage to install the root ca CONS : you can't use the official cloud anymore due to the mangled DNS","title":"Edit router DNS entries"},{"location":"reverse-proxy/nginx/","text":"From @zeigerpuppy I have rmfakecloud up and running (reMarkable 2 client, Debian 9 server). It's working great, sync, emails and handwriting recognition are all good. I am using the local proxy config and have now tested a working HTTPS connection for increased security (comments appreciated). Currently, my understanding is that in the default config, the proxy is just establishing an HTTP proxy connection as the rmfakecloud is served on http://server:3000. I would like to have this working on public IP networks too and have set up a NAT rule to forward port 3000 to my local server. This works but I guess it's all unencrypted. note that once HTTPS is working, direct forwarding of port 3000 should be disabled! So, to get it working via HTTPS, I think all we need to do is to set up a reverse HTTPS proxy on the server. NB: I initially tried this with Apache2 but couldn't get the websockets working . The error on the server was this: INFO[0387] accepting websocket abc INFO[0387] upgrade:websocket: the client is not using the websocket protocol: 'upgrade' token not found in 'Connection' header INFO[0387] closing the ws INFO[0387] [GIN] 2020/11/17 - 13:39:41 | 400 | 201.78\u00b5s | 127.0.0.1 | GET \"/notifications/ws/json/1\" So, I tried with an nginx reverse proxy with the following config: server { # increase max request size (for large PDFs) client_max_body_size 200M; server_name rmfakecloud.server.net; listen 443 ssl; # managed by Certbot ssl_certificate /etc/letsencrypt/live/rmfakecloud.server.net/fullchain.pem; # managed by Certbot ssl_certificate_key /etc/letsencrypt/live/rmfakecloud.server.net/privkey.pem; # managed by Certbot include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot location / { proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header Host $host; proxy_pass http://localhost:3000; proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection \"upgrade\"; proxy_read_timeout 1d; proxy_send_timeout 1d; } } } That seems to work well. There were two other config changes to make: set the STORAGE_URL on the server: export STORAGE_URL=https://rmfakecloud.server.net change the proxy URL on the device: stop services systemctl stop xochitl systemctl stop proxy edit the proxy address nano /etc/systemd/system/proxy.service change the line ExecStart to have the new address ... ExecStart=/home/root/scripts/rmfakecloud/secure -cert /home/root/scripts/rmfakecloud/proxy.crt -key /home/root/scripts/rmfakecloud/proxy.key https://rmfakecloud.server.net ... reload and start services systemctl daemon-reload systemctl start proxy systemctl start xochitl I think this is all good, happy to hear feedback but I think we should amend a section on the README to show how to configure with HTTPS. Now, the only thing needed is starting the server automatically....","title":"Nginx"},{"location":"reverse-proxy/traefik/","text":"Coming Soon","title":"Traefik"},{"location":"reverse-proxy/traefik/#coming-soon","text":"","title":"Coming Soon"}]}